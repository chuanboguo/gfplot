% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/cpue-map.R
\name{plot_cpue_spatial}
\alias{plot_cpue_spatial}
\title{Plot a map of commercial CPUE}
\usage{
plot_cpue_spatial(dat, bin_width = 7, n_minimum_vessels = 3, xlim = c(122,
  890), ylim = c(5373, 6027), utm_zone = 9, bath = c(100, 200, 500),
  fill_scale = viridis::scale_fill_viridis(trans = "sqrt", option = "D"),
  colour_scale = viridis::scale_colour_viridis(trans = "sqrt", option = "D"),
  rotation_angle = 0, rotation_center = c(500, 5700),
  fill_lab = "CPUE (kg/hr)", return_data = FALSE)
}
\arguments{
\item{dat}{Data from \code{\link[=get_cpue_spatial]{get_cpue_spatial()}} or \code{\link[=get_cpue_spatial_ll]{get_cpue_spatial_ll()}}}

\item{bin_width}{Width of hexagons in km.}

\item{n_minimum_vessels}{Minimum number of unique vessels before a hexagon is
shown. Defaults to 3 to satisfy privacy requirements.}

\item{xlim}{X axis limits in UTM units.}

\item{ylim}{Y axis limits in UTM units.}

\item{utm_zone}{UTM zone.}

\item{bath}{A numeric vector of depths to show bathymetry countours at.}

\item{fill_scale}{A ggplot \code{scale_fill_*} function to control colour shading.}

\item{colour_scale}{A ggplot \code{scale_colour_*} function to control border of
hexagon colours. This should likely match \code{fill_scale}.}

\item{rotation_angle}{Angle to rotate the entire map. Used in the synopsis
report to rotate the coast 40 degrees to fit more plots on the page.}

\item{rotation_center}{The center in UTM coordinates around which to rotate
the coast if it is rotated at all.}

\item{fill_lab}{Label for the color legend.}

\item{return_data}{Logical for whether to return the data instead of the plot.}
}
\description{
Plot a map of commercial CPUE
}
\examples{
## fake data demo:
xlim <- c(-134.1, -123.0)
ylim <- c(48.4, 54.25)
d <- dplyr::tibble(lat = runif(1000, min(ylim), max(ylim)),
  lon = runif(length(lat), min(xlim), max(xlim)),
  species_common_name = "fake species",
  cpue = rlnorm(length(lat), log(1000), 0.6),
  vessel_registration_number = rep(seq_len(100), each = 10))
plot_cpue_spatial(d, bin_width = 15, n_minimum_vessels = 1)
}
